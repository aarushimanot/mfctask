import random
import time

# Bubble Sort Implementation
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

# Function to generate random list of numbers
def generate_random_list(size):
    return [random.randint(0, 10000) for _ in range(size)]

# Function to measure the execution time of sorting
def measure_time(func, arr):
    start_time = time.time()
    func(arr)
    end_time = time.time()
    return end_time - start_time

# Function to compare sorting performance using Bubble Sort
def compare_bubble_sort():
    sizes = [100, 500, 1000, 5000, 10000]
    for size in sizes:
        print(f"Array Size: {size}")
        
        # Generate a random list of the given size
        arr = generate_random_list(size)

        # Measure the time taken for Bubble Sort
        arr_bubble = arr.copy()
        bubble_time = measure_time(bubble_sort, arr_bubble)
        print(f"Bubble Sort took {bubble_time:.6f} seconds")
        
        print("-" * 50)

# Run the comparison function
if __name__ == "__main__":
    compare_bubble_sort()
